{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","value","placeholder","backgroundColor","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","messege","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9f35a5de.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        <li className=\"nav-item\">\n          {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\n          {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\n        </li>\n        \n      </ul>\n      {/* <form classNameName=\"d-flex\">\n        <input classNameName=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button classNameName=\"btn btn-success\" type=\"submit\">Search</button>\n      </form> */}\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}` }>\n         <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">EnableDarkMode</label>\n       </div>  \n\n\n    </div>\n  </div>\n</nav>\n    )\n}\n\n\n// Defining Values In A Prop\nNavbar.propTypes={\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired,\n}\n\n\n// Default Props\n\nNavbar.defaultProps ={\n    title: 'Set Title Here',\n    aboutText:\"About\"\n}","import React,{useState} from \"react\";\n\n\nexport default function Textform(props) {\n\n  const handleUpClick=()=>{\n    // console.log(\"UPPERCASE was clicked\")\n    let newText=text.toUpperCase();\n    setText(newText)\n    props.showAlert(\"Converted to Upper Case!\", \"success\");\n  };\n  const handleCopy = () => {\n    let text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Clipboard was Copied!\", \"success\")\n    }\n    const handleExtraSpaces = () => {\n      let newText = text.split(/[ ]+/);\n      setText(newText.join(\" \"))\n      }\n      \n  const handleLoClick=()=>{\n    // console.log(\"lowercase was clicked\")\n    let newText=text.toLowerCase();\n    setText(newText)\n    props.showAlert(\"Converted to Lower Case!\", \"success\");\n  };\n  const handleClearClick=()=>{\n    // console.log(\"Clear text was clicked\")\n    let newText=''\n    setText(newText)\n    props.showAlert(\"Cleared the box!\", \"success\");\n  }\n\n  const handleOnChange=(event)=>{\n    // console.log(\"On Change\")\n    setText(event.target.value);\n  }\n\n\n\n  const [text, setText] = useState(\"\");\n  // setText(\"new Text\");   //correct Waw to Set A new Text\n\n  return (\n    <>\n    <div className=\"container my-3 \" style={{color:props.mode ==='dark'?'white':'#042743'}}>\n     <h1>{props.heading} </h1>\n       <div className=\"mb-3\">\n       \n        <textarea className=\"form-control\" value={text} placeholder=\"Enter Your Text Here\" id=\"myBox\" style={{backgroundColor:props.mode ==='light'?'white':'grey' ,color:props.mode ==='dark'?'white':'#042743'}} onChange={handleOnChange} rows=\"8\"></textarea>\n\n        <button className=\"btn btn-dark mx-1 my-2\" onClick={handleUpClick} >Convert to Upper Case</button>\n        <button className=\"btn btn-light mx-1 my-2\" onClick={handleLoClick} >Convert to Lower Case</button>\n        <button className=\"btn btn-dark mx-1 my-2\" onClick={handleClearClick} >  Clear Text  </button>\n        <button className= \"btn btn-light mx-1\" onClick={handleCopy}> Copy Text</button>\n        <button className= \"btn btn-dark mx-1\" onClick={handleExtraSpaces}>Remove extra spaces</button>\n\n        \n      </div>\n    </div>\n       <div className=\"container my-3\" style={{color:props.mode ==='dark'?'white':'#042743'}}>\n        <h2>Your text summary</h2>\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\n\n        <h2>Preview</h2>\n        <p>{text.length>0?text:\"Enter Something Above To Preview\"}</p>\n       </div>\n    \n\n  </>\n  )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n\n    const capitalize=(word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n         <strong> {capitalize(props.alert.type)} </strong>: {props.alert.msg}\n  \n</div>\n    )}","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n\n// } from \"react-router-dom\";\n\nfunction App() {\n \n    const [mode, setMode] = useState(\"light\");\n    const toggleMode= ()=>{\n      if(mode===\"light\"){\n        setMode(\"dark\")\n        document.body.style.backgroundColor='#042743';\n        showAlert(\"Dark Mode Has Been Enabled\", \"success\")\n        \n      }\n      else{\n        setMode(\"light\")\n        document.body.style.backgroundColor='white';\n        showAlert(\"Light Mode Has Been Enabled\", \"success\")\n      }\n    }\n\n    const [alert, setAlert] = useState(null);\n\n    const showAlert=(messege,type)=>{\n      setAlert({\n        msg:messege,\n        type:type\n      })\n      setTimeout(() => {\n        setAlert(null)\n        \n      }, 1500);\n    }\n \n  return (\n    <>       \n       {/* <Router> */}\n         <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n         <Alert alert={alert}/>\n         {/* <div className=\"container my-3\">\n         <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n         \n          {/* <Route exact path=\"/\"> */}\n          <Textform heading=\"Enter the text to anayze below\" mode={mode} showAlert={showAlert}/>\n          {/* </Route> */}\n        {/* </Switch>\n         </div>\n         </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}